---
interface Props {
  tags: string[];
}
const { tags } = Astro.props
---

<div class="tag-component">
  <div class="search-bar">
  <input type="text" id="tag-search-input" placeholder="" /> 
  <button id="reset-button"><span class="close heavy"></span></button>
  </div>
  <ul id="tag-list">
    {tags.map(tag => <li ><a href={`/tag/${tag}`} class="tag">{tag}</a></li>)}
  </ul>
</div>

<script is:inline>

  const tagList = document.getElementById('tag-list')
  const tags = tagList.getElementsByTagName('li');

  const resetButton = document.getElementById('reset-button');

  function filterTags() {
    const searchInput = document.getElementById('tag-search-input').value.toLowerCase();
    if (searchInput !== ''){
      resetButton.style.display = 'block';
    } else {

      resetButton.style.display = "none";
    }
    for (let i = 0; i < tags.length; i++) {
      const tag = tags[i];
      const tagName = tag.querySelector('a').textContent.toLowerCase();
  
      if (tagName.includes(searchInput)) {
        tag.style.display = 'block';
      } else {
        tag.style.display = 'none';
      }
    }
  }
  
  const searchBar = document.getElementById('tag-search-input');
  function resetFilter() {
    searchBar.value = ''; // Clear the search input
  
    const tagList = document.getElementById('tag-list');
    const tags = tagList.getElementsByTagName('li');
  
    for (let i = 0; i < tags.length; i++) {
      const tag = tags[i];
      tag.style.display = 'block'; // Show all tags
    }
  }
  
  searchBar.addEventListener('input', filterTags);
  
  resetButton.addEventListener('click', resetFilter);

</script>

<style>
.close{
  position: relative;
  display: inline-block;
  width: 20px;
  height: 20px;
  overflow: hidden;
  }

  .close::before, .close::after{
    content: '';
    position: absolute;
    height: 2px;
    width: 100%;
    top: 50%;
    left: 0;
    margin-top: -1px;
    background: #000;
    transform : rotate(45deg);
      height: 5px;
      margin-top: -3px;
  }
  
    .close:hover .close::before, .close:hover .close::after {
      background: #1ebcc5;
    }
#reset-button {
  display: none;
  position: absolute;
  right: 10px;
  color: black;


}
.tag-component {
  flex: 1;
  min-width: 100%;
  /* border: 1px solid white; */
}
.search-bar {
  position: relative;
  width: 100%;
  display: flex;
  justify-content: stretch;
  align-items: center;
}
input {
  flex: 1;
  padding: 10px 16px;
  font-size: 1.125rem;
}
ul {
  list-style-type: none;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  align-items: start;
  gap: 3px;
}

.tag {
  font-family: 'styrene';

  background: rgba(var(--fg-color-1), 0.77);
  border-radius: 9px 0 9px 0;
  color:  rgba(var(--bg-color-1), 1);
  display: flex;
  justify-content: center;
  align-items: center;
  height: 26px;
  padding: 0 10px;
  position: relative;
  margin: 0 10px 10px 0;
  text-decoration: none;
  transition:  200ms;
}
/**/
/* .tag::before { */
/*   background:rgba(var(--bg-color-1),1); */
/*   border-radius: 10px; */
/*   box-shadow: inset 0 1px rgba(0, 0, 0, 0.25); */
/*   content: ''; */
/*   height: 6px; */
/*   left: 10px; */
/*   position: absolute; */
/*   width: 6px; */
/*   top: 10px; */
/* } */

/* .tag::after { */
/*   transition:  200ms; */
/*   background: rgba(var(--bg-color-1), 1); */
/*   border-bottom: 13px solid transparent; */
/*   border-left: 10px solid  rgba(var(--fg-color-1), 0.77); */
/*   border-top: 13px solid transparent; */
/*   content: ''; */
/*   position: absolute; */
/*   right: 0; */
/*   top: 0; */
/* } */

.tag:hover {
  background-color: rgba(var(--bg-color-2), 1);
  color: rgba(var(--fg-color-1), 1);
}

/* .tag:hover::after { */
/*    border-left-color: rgba(var(--bg-color-2), 1);  */
/* } */
</style>
