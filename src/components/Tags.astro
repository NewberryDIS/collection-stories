---
interface Props {
  tags: string[];
}
const { tags } = Astro.props
---

<div class="tag-component">
  <ul id="tag-list">
    {tags.map(tag => <li ><a href={`/tag/${tag}`} class="tag">{tag}</a></li>)}
  </ul>
  <div class="search-bar">
    <input type="text" id="tag-search-input" placeholder="" /> 
    <button id="reset-button">X</button>
  </div>
</div>

<script is:inline>

  const tagList = document.getElementById('tag-list')
  const tags = tagList.getElementsByTagName('li');
  
  const resetButton = document.getElementById('reset-button');
  
  const searchBar = document.getElementById('tag-search-input');
  
  function filterTags() {
    const searchInput = searchBar.value.toLowerCase();
    if (searchInput !== ''){
      resetButton.style.display = 'block';
      tagList.style.display = 'block';
    } else {
  
      resetButton.style.display = "none";
      tagList.style.display = "none";
    }
    for (let i = 0; i < tags.length; i++) {
      const tag = tags[i];
      const tagName = tag.querySelector('a').textContent.toLowerCase();
  
      if (tagName.includes(searchInput)) {
        tag.style.display = 'block';
      } else {
        tag.style.display = 'none';
      }
    }
  }
  
  function resetFilter() {
    searchBar.value = ''; // Clear the search input
  
    for (let i = 0; i < tags.length; i++) {
      const tag = tags[i];
      tag.style.display = 'block'; // Show all tags
    }
  }
  
  searchBar.addEventListener('input', filterTags);
  searchBar.addEventListener('focus', function(){
    tagList.style.display = 'flex';
  });
  
  resetButton.addEventListener('click', resetFilter);
  
  document.addEventListener('click', function (event) {
    if (event.target !== searchBar && event.target !== tagList) {
      tagList.style.display = 'none';
    }
  });

</script>

<style>
#reset-button {
  display: none;
  position: absolute;
  right: 10px;
  color: black;
}

.tag-component {  
  flex: 1;
  min-width: 100%;
  position: relative;
  align-self: end;
  margin: 10px 0;
  /* border: 1px solid white; */
}

.search-bar {
  align-self: end;
  position: relative;
  width: 100%;
  display: flex;
  justify-content: stretch;
  align-items: center;
}

input {
  flex: 1;
  /* margin: 0 10px; */
  padding: 6px;
  /* font-size: 1rem; */
}

ul {
  list-style-type: none;
  padding: 0 1px;
  display: none;
  flex-direction: row-reverse;
  flex-wrap: wrap;
  justify-content: start;
  /* justify-content: space-between; */
  align-items: start;
  gap: 4px;
  position: absolute;
  bottom: 20px;
  max-height: 200px;
  overflow-y: auto;
}

.tag {
  font-family: 'styrene';
  font-size: 0.87rem;
  background: rgba(var(--fg-color-1), 0.77);
  /* border-radius: 9px 0 9px 0; */
  color:  rgba(var(--bg-color-1), 1);
  display: flex;
  justify-content: center;
  align-items: center;
  height: 26px;
  padding: 0 10px;
  position: relative;
  /* margin: 0 10px 10px 0; */
  text-decoration: none;
  transition:  200ms;
}

.tag:hover {
  background-color: rgba(var(--fg-color-2), 1);
  /* color: rgba(var(--fg-color-1), 1); */
}

</style>
